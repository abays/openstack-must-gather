#!/bin/bash

# load shared functions and data when not sourced
if [[ -z "$DIR_NAME" ]]; then
    CALLED=1
    DIR_NAME=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    source "${DIR_NAME}/common.sh"
fi

PIDS=""
# This option is used for CI only purposes and
# is disabled by default
DO_NOT_MASK=${DO_NOT_MASK:-0}

# TODO: Get secrets where a must-gather label is set. The following command
# get everything at the moment. All the retrieved yaml file present the .data
# section with a base64 encoded value, which represents the whole content of
# the secret.
function get_secrets {
    local NS=$1
    local service=$2
    for s in $(/usr/bin/oc -n "$NS" get secrets | grep -vE "(token|dockercfg)" | awk -v s="$service" '$0 ~ s {print $1}'); do
        mkdir -p "$NAMESPACE_PATH"/"$NS"/secrets/"$service"
        run_bg /usr/bin/oc -n "$NS" get secret "$s" -o yaml '>' "${NAMESPACE_PATH}/${NS}/secrets/${service}/${s}.yaml"
        PIDS="${PIDS}$? "
    done
}


function gather_secrets {
    PIDS=""
    local NS="$1"
    echo "Gathering secrets in namespace $NS"
    # Only get resources if the namespace exists
    if ! check_namespace "${NS}"; then
        return
    fi

    for service in "${OSP_SERVICES[@]}"; do
       get_secrets "$NS" "$service"
    done

    # Ensure background secret gathering tasks are done before masking secrets
    wait_bg $PIDS

    if [[ "${DO_NOT_MASK}" -eq 0 ]]; then
        # All secrets have been collected, apply masking on the entire directory
        /usr/bin/mask.py --dump-conf --dir "${NAMESPACE_PATH}/${NS}/secrets"
    fi
}


if [[ $CALLED -eq 1 ]]; then
    NS="$1"
    if [ -z "$NS" ]; then
        echo "No namespace passed, using the default one"
        NS=openstack
    fi

    # Get all related NodeSet screts
    for nodeset in $(oc get openstackdataplanenodesets -o name | cut -d/ -f2); do
        get_secrets "$NS" "$nodeset"
    done

    gather_secrets "$NS"
fi
